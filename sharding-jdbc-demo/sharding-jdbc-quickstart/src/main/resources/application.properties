server.port=8080

mybatis.config-location= classpath:META-INF/mybatis/mybatis-config.xml
mybatis.mapper-locations=classpath*:META-INF/mybatis/mapper/**/*.xml

spring.application.name=sharding-jdbc-quickstart
spring.main.allow-bean-definition-overriding=true


#配置日志
logging.level.root = info
logging.level.org.springframework.web=info
logging.level.com.liuli.boot.sharding=debug
logging.level.druid.sql=debug


#定义分片规则配置
##定义数据源
spring.shardingsphere.datasource.names=m1
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/sharding_jdbc_order
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456


#指定t_order表的数据分布情况，配置数据节点m1.t_order_1,m1.t_order_2
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=m1.t_order_$->{1..2}

#指定t_order的主键生成策略（SNOWFLAKE）和主键列
spring.shardingsphere.sharding.tables.t_order.key-generator.column=f_id
#SnowflakeShardingKeyGenerator类中指定雪花算法名称SNOWFLAKE
#spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

#使用自定义Redis主键算法
spring.shardingsphere.sharding.tables.t_order.key-generator.type=REDIS

#定义生成器使用的属性信息
spring.shardingsphere.sharding.tables.t_order.key-generator.props.host=localhost
spring.shardingsphere.sharding.tables.t_order.key-generator.props.port=6379

#指定t_order分片策略,包括分片键和分表算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=f_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{f_id %2  + 1}





#打开sql输出
spring.shardingsphere.props.sql.show = true
