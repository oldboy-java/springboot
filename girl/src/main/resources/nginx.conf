
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

	#定义IP限流规则
	# 1）第一个参数 $binary_remote_addr
	#      binary_目的是缩写内存占用， remote_addr表示通过IP地址来限流
    # 2）第二个参数 zone=iplimit:20m
    #  iplimit是一块内存区域（记录访问频率信息），20m是指内存区域的大小
    # 3） 第三个参数 rate=2r/s
    #  比如100r/m,表示访问的限流频率时1分钟100个请求    	
	limit_req_zone $binary_remote_addr zone=iplimit:20m  rate=2r/s;
	
	
	#服务器级别限流
	limit_req_zone $server_name zone=serverlimit:20m  rate=100r/s;
	
	#定义IP级别、服务器级别基于连接数限流
	limit_conn_zone $binary_remote_addr zone=ipconnlimit:20m ;
	limit_conn_zone $server_name zone=serverconnlimit:20m ;
	
	
	 
    server {
        listen       80;
        server_name  www.liuli.edu;

        location /access-limit {
			proxy_pass   http://192.168.31.46:8089;
			
			# 1）第一个参数zone=iplimit ==>引用limit_req_zone中的定义zone变量
			# 2）第二个参数burst=2 ==>设置一个大小为2缓冲区，当大量请求到来
			#   请求数量超过限流频率时，会将其放入缓存区域
			# 3）第三个参数 nodelay ==> 缓冲区满了以后，直接返回503异常
            limit_req zone=iplimit burst=2 nodelay;
			
			
			#服务器级别限流
			limit_req zone=serverlimit burst=100 nodelay;
			
			#每个IP地址最多保持一个连接
			limit_conn ipconnlimit 1;
			
			#每个server最多保持100个连接
			limit_conn serverconnlimit 100;
			
			
			#定义请求速率限流后异常状态码504，默认是503
			limit_req_status 504;
			
			#定义请求连接数限流后异常状态码504，默认是503
			limit_conn_status 504;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

		location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }
      
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
